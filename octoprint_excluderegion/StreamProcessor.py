# coding=utf-8
"""Class for processing a Gcode stream to apply exclude region processing."""

from __future__ import absolute_import, division
import copy

from octoprint.filemanager.util import LineProcessorStream

from .GcodeHandlers import GcodeHandlers


class StreamProcessorComm(object):
    """Class implementing a sendCommand method for capturing gcode generated by @-commands."""

    def __init__(self):
        """Initialize the object with an empty command buffer."""
        self.bufferedCommands = []

    def reset(self):
        """Clear the list of buffered commands."""
        self.bufferedCommands = []

    def isStreaming(self):  # pylint: disable=no-self-use
        """Indicate this comm instance is not streaming."""
        return False

    def sendCommand(self, command, **kwargs):  # pylint: disable=unused-argument
        """Record the command in the buffer."""
        if (command is not None):
            self.bufferedCommands.append(command)


class StreamProcessor(LineProcessorStream):
    r"""
    StreamProcessor subclass that applies exclusion regions to the stream.

    Attributes
    ----------
    input_stream : Stream
        The stream to process (inherited from octoprint.filemanager.util.LineProcessorStream).
    gcodeHandlers : GcodeHandlers
        The GcodeHandlers instance to use for processing the commands.
    commInstance : StreamProcessorComm
        Object that mimics the OctoPrint comm instance for capturing generated Gcode commands
        written to the sendCommand method.
    eol : string | None
        The eol character(s) to use when concatenating multiple lines of Gcode.  This is
        typically auto-detected based on the first line ending encountered, and will default
        to "\n" if no other line ending is detected (e.g. this value is None when a line ending
        is needed).
    """

    def __init__(self, inputStream, gcodeHandlers):
        """
        Initialize the instance.

        Parameters
        ----------
        inputStream : Stream
            The stream to process.
        gcodeHandlers : GcodeHandlers
            The GcodeHandlers instance to capture setting values from.
        """
        assert inputStream is not None, "inputStream must be provided"
        assert gcodeHandlers is not None, "gcodeHandlers must be provided"

        super(StreamProcessor, self).__init__(inputStream)

        self._logger = gcodeHandlers._logger  # pylint: disable=protected-access
        self.gcodeHandlers = GcodeHandlers(
            copy.deepcopy(gcodeHandlers.state),
            self._logger
        )
        self._eol = None
        self.commInstance = StreamProcessorComm()

    @property
    def eol(self):
        """EOL marker to use for separating multiple lines of commands."""
        if (self._eol is None):
            self._eol = "\n"

        return self._eol

    @eol.setter
    def eol(self, value):
        """Set the eol to use for separating multiple lines of commands."""
        self._eol = value

    def process_line(self, line):
        """
        Apply exclusion rules to a line of Gcode from the stream.

        Parameters
        ----------
        line : string
            The Gcode line to process, including the terminating line ending character(s).

        Returns
        -------
        string | None
            The (possibly altered) Gcode line, or None to omit the current line from the output.
            Terminating line ending character(s) will be included in this result.  May return
            multiple lines separated by line endings.
        """
        parsed = self.gcodeHandlers.gcodeParser.parse(line)

        if (parsed.eol):
            self.eol = parsed.eol

        if (parsed.type is not None):
            return self._handleGcode(parsed)
        elif (parsed.text.startswith("@")):
            return self._handleAtCommand(parsed)

        return line

    def _handleGcode(self, parsed):
        """
        Process a gcode line.

        Parameters
        ----------
        parsed : GcodeParser
            The GcodeParser instance the line was parsed into.

        Returns
        -------
        string | None
            The (possibly altered) Gcode line, or None to omit the current line from the output.
            Terminating line ending character(s) will be included in this result.  May return
            multiple lines separated by line endings.
        """
        handlerResult = self.gcodeHandlers.handleGcode(
            parsed.stringify(
                includeLineNumber=False,
                includeComment=False,
                includeEol=False
            ),
            parsed.gcode,
            parsed.subCode
        )

        if (handlerResult is not None):
            if (not isinstance(handlerResult, list)):
                handlerResult = [handlerResult]

            lines = []

            for item in handlerResult:
                if (isinstance(item, tuple)):
                    item = item[0]

                if (item is not None):
                    lines.append(str(item))

            if (lines):
                return self.eol.join(lines) + self.eol

            return None

        return parsed.source

    @staticmethod
    def _splitAtCommand(command):
        """
        Split the provided @-command line into the command and parameter portions.

        This is intended to match OctoPrint's parsing of @ command lines, which simply trims leading
        whitespace, splits the command from the parameters on the first whitespace, and removes the
        leading '@' from the command.  That does mean the command could be an empty string, or
        could potentially contain any non-whitespace character.

        Returns
        -------
        tuple(command, parameters)
            A tuple with the parsed command as the first element (may be empty string or contain
            any non-whitespace character) and the parameters as the second element (may be an empty
            string, if no parameters were found).
        """
        pieces = command.split(None, 1)
        return (
            (pieces[0])[1:],
            "" if (len(pieces) < 2) else pieces[1]
        )

    def _handleAtCommand(self, parsed):
        """
        Process an @-command line.

        Parameters
        ----------
        parsed : GcodeParser
            The GcodeParser instance the line was parsed into.

        Returns
        -------
        string | None
            The (possibly altered) line, or None to omit the current line from the output.
            Terminating line ending character(s) will be included in this result.  May return
            multiple lines separated by line endings.
        """
        (command, parameters) = self._splitAtCommand(parsed.text)

        self.commInstance.reset()

        if (self.gcodeHandlers.handleAtCommand(
                self.commInstance,
                command,
                parameters
        )):
            if (self.commInstance.bufferedCommands):
                return self.eol.join(self.commInstance.bufferedCommands) + self.eol

            return None

        return parsed.source
